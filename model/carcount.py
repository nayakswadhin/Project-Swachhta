# -*- coding: utf-8 -*-
"""Carcount.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Oen0jIUZq-2FW9g3li63MZDhRDUDpOoT
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5  # clone
# %cd yolov5
# %pip install -qr requirements.txt comet_ml  # install

import torch
import utils
display = utils.notebook_init()  # checks

!python detect.py --weights yolov5s.pt --img 640 --conf 0.25 --source data/images
# display.Image(filename='runs/detect/exp/zidane.jpg', width=600)

# Validate YOLOv5s on COCO val
!python val.py --weights yolov5s.pt --data coco.yaml --img 640 --half

# Import necessary libraries
import torch
import cv2
import numpy as np
from PIL import Image

# Load YOLOv5 model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', force_reload=True, trust_repo=True)

# Path to the image
im = '/content/test.jpeg'

# Perform inference
results = model(im)

# Define the object classes you want to count
object_classes = ['car', 'motorcycle']

# Define probability threshold
prob_threshold = 0.2

# Count the number of each type of object detected
object_counts = {obj_class: 0 for obj_class in object_classes}

# Prepare to annotate the image
img_cv = cv2.imread(im)  # Read the image using OpenCV

for detection in results.pred[0]:
    prob = detection[4].item()  # Probability of detection
    if prob >= prob_threshold:
        obj_class = results.names[int(detection[-1])]
        if obj_class in object_classes:
            object_counts[obj_class] += 1

            # Get bounding box coordinates
            x1, y1, x2, y2 = map(int, detection[:4])  # Convert to integer

            # Draw bounding box and label on the image
            cv2.rectangle(img_cv, (x1, y1), (x2, y2), (255, 0, 0), 2)
            cv2.putText(img_cv, f'{obj_class} {prob:.2f}', (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

# Display the count for each type of object
for obj_class, count in object_counts.items():
    print(f"Number of {obj_class}: {count}")

# Save and display annotated image
annotated_image_path = '/content/annotated_bikes.jpeg'
cv2.imwrite(annotated_image_path, img_cv)

# Display annotated image in Colab
from google.colab.patches import cv2_imshow
cv2_imshow(img_cv)

